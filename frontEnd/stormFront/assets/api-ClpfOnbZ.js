import{i as m,s as d}from"./stationInfo-BWRfB6xq.js";import{g as p,a as h}from"./getStation-BFvQ2HL2.js";const y=async()=>{const a=await p("real");return Object.entries(a).map(e=>({id:e[1].id,label:e[1].name}))},f=a=>m(a.value),u=async(a,t,e,o)=>{const s=Math.min(...t.hpre),n=Math.max(...t.hpre),r=n-s,i={title:{text:`${e.name}站点 ${e.time} 实时潮位图`,textStyle:{color:"hsl(220, 50%, 50%)",fontSize:20}},tooltip:{trigger:"axis"},legend:{data:[e.name],right:"15%",top:"1%"},grid:{left:"3%",right:"4%",bottom:"10%",containLabel:!0},toolbox:{feature:{dataZoom:{yAxisIndex:"none"},saveAsImage:{}}},xAxis:{type:"category",boundaryGap:!1,data:t.time,axisLabel:{padding:[0,0,0,50]}},yAxis:{type:"value",min:s-r*5,max:n+r*5,axisLabel:{formatter:function(l){return l.toFixed(2)}}},dataZoom:[{type:"inside",start:0,end:100},{start:0,end:20}],series:[{name:e.name,type:"line",smooth:!0,data:t.hpre,connectNulls:!0}]};o||(i.graphic={type:"text",left:"center",top:"middle",silent:!0,invisible:t.hpre.length>0,style:{fill:"#9d9d9d",fontWeight:"bold",text:"该时间段暂无数据",fontFamily:"Microsoft YaHei",fontSize:"25px"}}),i&&a.setOption(i)},b=async(a,t,e,o,s)=>{const n=Math.min(...t.hpre),r=Math.max(...t.hpre),i={title:{text:`${e.name}站点 ${e.time} 实时潮位图`,top:"1%",textStyle:{color:"hsl(220, 50%, 50%)",fontSize:15}},tooltip:s?void 0:{trigger:"axis"},legend:{data:[e.name],right:"15%",top:"8%"},grid:{left:"3%",right:"4%",bottom:"10%",containLabel:!0},toolbox:{feature:{dataZoom:{yAxisIndex:"none"},saveAsImage:{}}},xAxis:{type:"category",boundaryGap:!1,data:t.time,axisLabel:{padding:[0,0,0,50]}},yAxis:{type:"value",min:Math.ceil(n-1),max:Math.floor(r+1),axisLabel:{formatter:function(l){return l.toFixed(2)}}},series:[{name:e.name,type:"line",smooth:!0,data:t.hpre,connectNulls:!0}],graphic:{elements:[{type:"text",style:{text:"单位:(m)",x:5,y:900,fontSize:13}}]}};o||(i.graphic={type:"text",left:"center",top:"middle",silent:!0,invisible:t.hpre.length>0,style:{fill:"#9d9d9d",fontWeight:"bold",text:"该时间段暂无数据",fontFamily:"Microsoft YaHei",fontSize:"25px"}}),i&&a.setOption(i)},M=async a=>{const t=await h("real");a.addSource("stations",{type:"geojson",data:t,attribution:"name"});const e=await new Promise(o=>{a.loadImage("/png/custom_marker.png",(s,n)=>{o(n)})});a.addImage("station-marker",e),a.addLayer({id:"stations",source:"stations",type:"symbol",layout:{"icon-image":"station-marker","icon-size":.6,"text-field":["get","name"],"text-font":["Open Sans Semibold","Arial Unicode MS Bold"],"text-offset":[0,1.25],"text-anchor":"top","text-size":18},paint:{"text-color":"#e2e8f0"}})},c=a=>{const t=Math.floor(a),e=Math.floor((a-t)*60);return t+"° "+e+"'"},S=a=>{const t=d[a];return{name:t.name,pinyin:t.pinyin,time:new Date(Date.now()).toLocaleString().replace(/:\d\d$/,""),lon:c(t.coord[0]),lat:c(t.coord[1]),type:t.type}},v=async a=>{const t=`/api/v1/data/level/station/real?station=${d[a].pinyin}`,e=await fetch(t).then(n=>n.status===200?n.json():{code:"",data:[]}).then(n=>n);if(!e.data||e.data.length===0)return{time:[],hpre:[]};const o=[],s=[];return e.data.forEach(n=>{o.push(n.time),s.push(n.level)}),{time:o,hpre:s}};export{v as a,M as b,y as c,b as d,u as e,S as g,f as i};
